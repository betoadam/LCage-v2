options{  JDK_VERSION = "1.5";  static = true;  DEBUG_PARSER = true;}PARSER_BEGIN(LCage)package parser;import recovery.*;import view.Tela;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import javax.swing.JOptionPane;import java.io.FileWriter;import controleDeArquivos.CreateFile;import java.io.FileWriter;import javax.swing.JFileChooser;public class LCage{  final static Tela window = new Tela();    public static void main(String args []) throws ParseException  {	//Inicia a tela		window.setVisible(true);				window.getCompilar().addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {	  			window.setVazioConsoleMsg();				if((window.getTextArquivo().getText().equals(window.getCampoTexto())) != true)                {                  window.setControleArquivo(false);                }                if(window.getControleArquivo() || window.getTextArquivo().getText().equals(" ") )                {									inicia();		   		}else				{					if(window.getTextArquivo().getText().equals(""))	                {	                    JOptionPane.showMessageDialog (null, "Arquivo vazio", "Arquivo", JOptionPane.WARNING_MESSAGE);	                }else{	                  int resp = JOptionPane.showConfirmDialog(null, "Salvar altera\u00e7\u00f5es?");	                                    	  if(resp == 0)                  	  {                  	    //Salvar um novo arquivo se ele n existir                  	    if(window.getFile() == null)                  	    {                  	     	window.salvarComo();							inicia();							                  	    }else //Se o arquivo ja existir salvar nele                  	    {                  	      	window.salvar();							inicia();                  	    }                  	  }                  	}				}		   	}  		});  }//FunÁ„o que inicia a compilaÁ„o  static void inicia(){    FileReader arql = null;        try {			arql = new FileReader(window.getFile());		} catch (FileNotFoundException e2) {			e2.printStackTrace();		}		BufferedReader arq = new BufferedReader(arql);	    try	    {	      LCage parser = new LCage(arq);	    }catch (Exception e1)	    {	      LCage.ReInit(arq);	    }catch (Error e1)   		{   		  LCage.ReInit(arq);   		}         	try      	{    		SimpleNode n = LCage.Start();   			n.dump("", window);		}		catch (Exception e1)     	{} 		catch (Error e1)   		{}  }  static public String im(int x)  {    int k;    String s;    s = tokenImage [x];    k = s.lastIndexOf("\"");    try    {      s = s.substring(1, k);    }    catch (StringIndexOutOfBoundsException e)    {}    return s;  }  static Token lastError = null;  static boolean eof; // vari√°vel que indica se EOF foi alcan√ßado
  // o m√©todo abaixo consome tokens at√© alcan√ßar um que perten√ßa ao conjunto
  // de sincroniza√ß√£o
  static void consumeUntil(RecoverySet g, ParseException e, String met) throws ParseEOFException, ParseException  {    Token tok;    window.setConsole("\n*** " + met + " ***");    window.setConsole("\n     Conjunto de sincronizaÁ„o: " + g);    if (g == null) throw e; // se o conjunto √© null, propaga a exce√ß√£o
    tok = getToken(1); // pega token corrente
    while (!eof)    { // se n√£o chegou ao fim do arquivo
      if (g.contains(tok.kind))      { //achou um token no conjunto
        window.setConsole("\n     Encontrado token de sincronizaÁ„o: " + im(tok.kind));        break;      }      window.setConsole("\n     Ignorando o token: " + im(tok.kind));      getNextToken(); // pega pr√≥ximo token       
      tok = getToken(1);      if (tok.kind == EOF && !g.contains(EOF))  // fim da entrada?   
      eof = true;    }    if (tok != lastError)    {      window.setConsole(e.getMessage());      lastError = tok;    }    if (eof) throw new ParseEOFException("Encontrei EOF onde n„o deveria.");  }}PARSER_END(LCage)SKIP :{  " "| "\t"| "\n"| "\r"| <COMENTARIO: "//" (<COM>)* >| <COMENTARIOS: "/*" ("\n" | "\r" | <COM>)* "*/" >| <#COM: ( ~["\"","\\","\n","\r","\""] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ( ["\n","\r"] | "\r\n") ) | "\"" )*>}TOKEN :{  <      MAIN: 	"main"		>| <	  ACHAVES: 	"{"			>| <	  FCHAVES: 	"}"			>| <	  APARENT: 	"("			>| <	  FPARENT: 	")"			>| <	      VAR: 	"cage"		>| <PTOVIRGULA: 	";"			>| <		   IF: 	"cageif"	>| <		 ELSE: 	"elcages"	>| <		WHILE: 	"ncage"		>	| <		   DO: 	"docage"	>| <    RETURN: 	"recage"	>| <     PRINT: 	"pricage"	>| <    FUNCAO:  "funCage"	>| <		  INT:  "icage"		>| <     FLOAT: 	"fcage"		>| <      BOOL:  "bcage"		>| <		 TRUE: 	"trucage"	>| <		FALSE: 	"falcage"	>| <	  VIRGULA: 	","			>| <		ATRIB: 	":="		>}TOKEN :{ <			 OP: ("+" | "-" | "*" | "/" )					>|<		    OPL: ( "<" | ">" | "=="| "<="| ">=" |"!")		>|<		 #LETRA: ["a"-"z","A"-"Z"]							> |<	    #DIGITO: ["0"-"9"]									>|<	   #DIGITOS: <DIGITO> (<DIGITO>)*						>|<		    #LD: <LETRA> | <DIGITO>							>|<		  #FSUB: ("_"(<LD>)+)								>|<		   #FOP: ("."<DIGITOS>)?							>|<		 #EXPOP: ("E"("+" | "-")?<DIGITOS>)?				>|<IDENTIFICADOR: <LETRA>(<LD>)*(<FSUB>)*					>|< TOKEN_NUMLIT: <DIGITOS><FOP><EXPOP>						>}// TRATANDO OS ERROS LEXICOS ENCONTRADOSSPECIAL_TOKEN : {	<ID_INVALIDO: ("@" | "!" | "#" | "*" | "-" | "+" "=" | "&" | <DIGITO>)(<LETRA>|<DIGITO> | "_" | "@")*>{		System.out.println("Identificador Invalido: "+image);		countLexError++;		System.out.println(			"\u005cn\u005cnErro lexico -------->  Linha "+			 input_stream.getEndLine()+			 " Coluna "+ 			 input_stream.getEndColumn()+			 " "+			 image+			 "\u005cn"		);	}|<INVALIDO_LEXICO: (~["a"-"z","A"-"Z","0"-"9","\"","(",")","{","}",";",",",".","=",":",">","<","!","+","-","*","/"," ","_",";","\t","\n","\r","\f"])+>{System.out.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" Caractere invalido encontrado: " + image + "TOTAL ERRO "+countLexError);                          countLexError++;                          System.out.println("\u005cn\u005cnErro lexico -------->  Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" "+image +"\u005cn");                          }}SimpleNode Start() throws ParseEOFException:{RecoverySet g = First.start;}{      try {	 Main()  	VariosFunc()  }  catch (ParseException e)    {       consumeUntil(g, e, "start");    }        {    return jjtThis;  }}void VariosFunc() throws ParseEOFException:{RecoverySet g = First.variosFunc;}{		try {	  (Func()	  VariosFunc())?    }    catch (ParseException e)    {       consumeUntil(g, e, "variosFunc");    }}int Main() throws ParseEOFException:{RecoverySet g = First.main;}{  try {     	<MAIN> <ACHAVES>  		 VarDecl()		 SeqComandos()				 <FCHAVES>    }    catch (ParseException e)    {       consumeUntil(g, e, "main");    }    {    return 0;  	}}void VarDecl() throws ParseEOFException:{RecoverySet g = First.varDecl;}{    try {     	(<VAR> Tipo() <IDENTIFICADOR> Atribuicao())*    }    catch (ParseException e)    {       consumeUntil(g, e, "varDecl");    } }void Tipo() throws ParseEOFException:{RecoverySet g = First.tipo;}{	try {     	<INT> | <BOOL> | <FLOAT>    }    catch (ParseException e)    {       consumeUntil(g, e, "tipo");    }}void Atribuicao() throws ParseEOFException:{RecoverySet g = First.atribuicao;}{	try {     	 Atribuir()|<PTOVIRGULA>     }    catch (ParseException e)    {       consumeUntil(g, e, "atribuicao");    }  }void Atribuir() throws ParseEOFException:{RecoverySet g = First.atribuir;}{	try {     	<ATRIB> Exp() Loop()  |    	<APARENT> TalvezListaExp() <FPARENT> <PTOVIRGULA>|    	Mdeclaracao()     }    catch (ParseException e)    {       consumeUntil(g, e, "atribuir");    }}void TalvezListaExp()throws ParseEOFException:{RecoverySet g = First.talvezListaExp;}{	try {     	(ListaExp())?    }    catch (ParseException e)    {       consumeUntil(g, e, "talvezListaExp");    }  }void Loop()throws ParseEOFException:{RecoverySet g = First.loop;}{  	try {     	Mdeclaracao() | <PTOVIRGULA>    }    catch (ParseException e)    {       consumeUntil(g, e, "loop");    }   }void ListaExp() throws ParseEOFException:{RecoverySet g = First.listaExp;}{  	try {     	Exp() ListaExp2()    }    catch (ParseException e)    {       consumeUntil(g, e, "listaExp");    }}void ListaExp2() throws ParseEOFException:{RecoverySet g = First.listaExp2;}{	try {     	(<VIRGULA> Exp() ListaExp2())?    }    catch (ParseException e)    {       consumeUntil(g, e, "listaExp2");    }  }void Mdeclaracao() throws ParseEOFException:{RecoverySet g = First.mdeclaracao;}{	try {     	<VIRGULA> <IDENTIFICADOR> Atribuicao()    }    catch (ParseException e)    {       consumeUntil(g, e, "mdeclaracao");    }  	}void Exp() throws ParseEOFException:{RecoverySet g = First.exp;}{	try {     	<APARENT> Exp() <OP> Exp() <FPARENT> | Fator()    }    catch (ParseException e)    {       consumeUntil(g, e, "exp");    }	}void Fator() throws ParseEOFException:{RecoverySet g = First.fator;}{	try {     	<IDENTIFICADOR> TalvezFator() | <TOKEN_NUMLIT> | <TRUE> | <FALSE>    }    catch (ParseException e)    {       consumeUntil(g, e, "fator");    }  }void TalvezFator() throws ParseEOFException:{RecoverySet g = First.talvezFator;}{	try {     	(<APARENT>TalvezListaExp() <FPARENT>)?    }    catch (ParseException e)    {       consumeUntil(g, e, "talvezFator");    } 	}void SeqComandos() throws ParseEOFException:{RecoverySet g = First.seqComandos;}{	try {     	(Comando()SeqComandos())?    }    catch (ParseException e)    {       consumeUntil(g, e, "seqComandos");    }  }void Comando()throws ParseEOFException:{RecoverySet g = First.comando;}{	try {     	<IDENTIFICADOR> Atribuir() 		| <IF> <APARENT> Exp_logicas() <FPARENT><ACHAVES>SeqComandos()<FCHAVES> TalvezElse() <PTOVIRGULA>		| <WHILE> <APARENT> Exp_logicas() <FPARENT><ACHAVES>SeqComandos()<FCHAVES> <PTOVIRGULA>		| <DO> <ACHAVES>SeqComandos()<FCHAVES> <WHILE> <APARENT> Exp_logicas() <FPARENT> <PTOVIRGULA>								| <RETURN> Exp() <PTOVIRGULA>		| <PRINT> <APARENT> Exp() <FPARENT> <PTOVIRGULA>    }    catch (ParseException e)    {       consumeUntil(g, e, "comando");    }   }void TalvezElse()throws ParseEOFException:{RecoverySet g = First.talvezElse;}{	try {     	(<ELSE> <ACHAVES>SeqComandos()<FCHAVES>)?    }    catch (ParseException e)    {       consumeUntil(g, e, "talvezElse");    }   }void Exp_logicas() throws ParseEOFException:{RecoverySet g = First.exp_logicas;}{	try {     	<APARENT> Exp_logicas() <OPL> Exp_logicas() <FPARENT> | Fator_logico()    }    catch (ParseException e)    {       consumeUntil(g, e, "exp_logicas");    }  	}void Fator_logico() throws ParseEOFException:{RecoverySet g = First.fator_logico;}{	try {     	<IDENTIFICADOR> | <TOKEN_NUMLIT> | <TRUE> | <FALSE>    }    catch (ParseException e)    {       consumeUntil(g, e, "fator_logico");    }}void Func() throws ParseEOFException:{RecoverySet g = First.func;}{	try {     	<FUNCAO> Tipo() <IDENTIFICADOR> <APARENT> TalvezListaArg() <FPARENT> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>    }    catch (ParseException e)    {       consumeUntil(g, e, "func");    }}void TalvezListaArg()throws ParseEOFException:{RecoverySet g = First.talvezListaArg;}{	try { ( ListaArg() )?    }    catch (ParseException e)    {       consumeUntil(g, e, "talvezListaArg");    }	}void ListaArg()throws ParseEOFException:{RecoverySet g = First.listaArg;}{	try {     	Tipo() <IDENTIFICADOR> ListaArg2()    }    catch (ParseException e)    {       consumeUntil(g, e, "listaArg");    }  }void ListaArg2()throws ParseEOFException:{RecoverySet g = First.listaArg2;}{	try { (<VIRGULA> Tipo() <IDENTIFICADOR> ListaArg2())?    }    catch (ParseException e)    {       consumeUntil(g, e, "listaArg2");    } 		}