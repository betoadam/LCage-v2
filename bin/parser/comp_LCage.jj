/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. comp_LCage.jj */
/*@egen*/options{  JDK_VERSION = "1.5";  static = true;  DEBUG_PARSER = true;}PARSER_BEGIN(LCage)package parser;import recovery.*;import view.Tela;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import javax.swing.JOptionPane;import java.io.FileWriter;import controleDeArquivos.CreateFile;import java.io.FileWriter;import javax.swing.JFileChooser;public class LCage/*@bgen(jjtree)*/implements LCageTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTLCageState jjtree = new JJTLCageState();

/*@egen*/  final static Tela window = new Tela();    public static void main(String args []) throws ParseException  {	//Inicia a tela		window.setVisible(true);				window.getCompilar().addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {	  			window.setVazioConsoleMsg();				if((window.getTextArquivo().getText().equals(window.getCampoTexto())) != true)                {                  window.setControleArquivo(false);                }                if(window.getControleArquivo() || window.getTextArquivo().getText().equals(" ") )                {									inicia();		   		}else				{					if(window.getTextArquivo().getText().equals(""))	                {	                    JOptionPane.showMessageDialog (null, "Arquivo vazio", "Arquivo", JOptionPane.WARNING_MESSAGE);	                }else{	                  int resp = JOptionPane.showConfirmDialog(null, "Salvar altera\u00e7\u00f5es?");	                                    	  if(resp == 0)                  	  {                  	    //Salvar um novo arquivo se ele n existir                  	    if(window.getFile() == null)                  	    {                  	     	window.salvarComo();							inicia();							                  	    }else //Se o arquivo ja existir salvar nele                  	    {                  	      	window.salvar();							inicia();                  	    }                  	  }                  	}				}		   	}  		});  }//Fun\u00e7\u00e3o que inicia a compila\u00e7\u00e3o  static void inicia(){    FileReader arql = null;        try {			arql = new FileReader(window.getFile());		} catch (FileNotFoundException e2) {			e2.printStackTrace();		}		BufferedReader arq = new BufferedReader(arql);	    try	    {	      LCage parser = new LCage(arq);	    }catch (Exception e1)	    {	      LCage.ReInit(arq);	    }catch (Error e1)   		{   		  LCage.ReInit(arq);   		}         	try      	{    		SimpleNode n = LCage.Start();   			n.dump("", window);		}		catch (Exception e1)     	{} 		catch (Error e1)   		{}  }  static public String im(int x)  {    int k;    String s;    s = tokenImage [x];    k = s.lastIndexOf("\"");    try    {      s = s.substring(1, k);    }    catch (StringIndexOutOfBoundsException e)    {}    return s;  }  static Token lastError = null;  static boolean eof; // vari\u00c3\u00a1vel que indica se EOF foi alcan\u00c3\u00a7ado
  // o m\u00c3\u00a9todo abaixo consome tokens at\u00c3\u00a9 alcan\u00c3\u00a7ar um que perten\u00c3\u00a7a ao conjunto
  // de sincroniza\u00c3\u00a7\u00c3\u00a3o
  static void consumeUntil(RecoverySet g, ParseException e, String met) throws ParseEOFException, ParseException  {    Token tok;    window.setConsole("\n*** " + met + " ***");    window.setConsole("\n     Conjunto de sincroniza\u00e7\u00e3o: " + g);    if (g == null) throw e; // se o conjunto \u00c3\u00a9 null, propaga a exce\u00c3\u00a7\u00c3\u00a3o
    tok = getToken(1); // pega token corrente
    while (!eof)    { // se n\u00c3\u00a3o chegou ao fim do arquivo
      if (g.contains(tok.kind))      { //achou um token no conjunto
        window.setConsole("\n     Encontrado token de sincroniza\u00e7\u00e3o: " + im(tok.kind));        break;      }      window.setConsole("\n     Ignorando o token: " + im(tok.kind));      getNextToken(); // pega pr\u00c3\u00b3ximo token       
      tok = getToken(1);      if (tok.kind == EOF && !g.contains(EOF))  // fim da entrada?   
      eof = true;    }    if (tok != lastError)    {      window.setConsole(e.getMessage());      lastError = tok;    }    if (eof) throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");  }}PARSER_END(LCage)SKIP :{  " "| "\t"| "\n"| "\r"| <COMENTARIO: "//" (<COM>)* >| <COMENTARIOS: "/*" ("\n" | "\r" | <COM>)* "*/" >| <#COM: ( ~["\"","\\","\n","\r","\""] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ( ["\n","\r"] | "\r\n") ) | "\"" )*>}TOKEN :{  <      MAIN: 	"main"		>| <	  ACHAVES: 	"{"			>| <	  FCHAVES: 	"}"			>| <	  APARENT: 	"("			>| <	  FPARENT: 	")"			>| <	      VAR: 	"cage"		>| <PTOVIRGULA: 	";"			>| <		   IF: 	"cageif"	>| <		 ELSE: 	"elcages"	>| <		WHILE: 	"ncage"		>	| <		   DO: 	"docage"	>| <    RETURN: 	"recage"	>| <     PRINT: 	"pricage"	>| <    FUNCAO:  "funCage"	>| <		  INT:  "icage"		>| <     FLOAT: 	"fcage"		>| <      BOOL:  "bcage"		>| <		 TRUE: 	"trucage"	>| <		FALSE: 	"falcage"	>| <	  VIRGULA: 	","			>| <		ATRIB: 	":="		>}TOKEN :{ <			 OP: ("+" | "-" | "*" | "/" )					>|<		    OPL: ( "<" | ">" | "=="| "<="| ">=" |"!")		>|<		 #LETRA: ["a"-"z","A"-"Z"]							> |<	    #DIGITO: ["0"-"9"]									>|<	   #DIGITOS: <DIGITO> (<DIGITO>)*						>|<		    #LD: <LETRA> | <DIGITO>							>|<		  #FSUB: ("_"(<LD>)+)								>|<		   #FOP: ("."<DIGITOS>)?							>|<		 #EXPOP: ("E"("+" | "-")?<DIGITOS>)?				>|<IDENTIFICADOR: <LETRA>(<LD>)*(<FSUB>)*					>|< TOKEN_NUMLIT: <DIGITOS><FOP><EXPOP>						>}// TRATANDO OS ERROS LEXICOS ENCONTRADOSSPECIAL_TOKEN : {	<ID_INVALIDO: ("@" | "!" | "#" | "*" | "-" | "+" "=" | "&" | <DIGITO>)(<LETRA>|<DIGITO> | "_" | "@")*>{		System.out.println("Identificador Invalido: "+image);		countLexError++;		System.out.println(			"\n\nErro lexico -------->  Linha "+			 input_stream.getEndLine()+			 " Coluna "+ 			 input_stream.getEndColumn()+			 " "+			 image+			 "\n"		);	}|<INVALIDO_LEXICO: (~["a"-"z","A"-"Z","0"-"9","\"","(",")","{","}",";",",",".","=",":",">","<","!","+","-","*","/"," ","_",";","\t","\n","\r","\f"])+>{System.out.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" Caractere invalido encontrado: " + image + "TOTAL ERRO "+countLexError);                          countLexError++;                          System.out.println("\n\nErro lexico -------->  Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" "+image +"\n");                          }}SimpleNode Start() throws ParseEOFException:{/*@bgen(jjtree) Start */
 SimpleNode jjtn000 = new SimpleNode(JJTSTART);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.start;}{/*@bgen(jjtree) Start */
  try {
/*@egen*/      try {	 Main()  	VariosFunc()  }  catch (ParseException e)    {       consumeUntil(g, e, "start");    }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/        {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseEOFException) {
      throw (ParseEOFException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void VariosFunc() throws ParseEOFException:{/*@bgen(jjtree) VariosFunc */
 SimpleNode jjtn000 = new SimpleNode(JJTVARIOSFUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.variosFunc;}{/*@bgen(jjtree) VariosFunc */
        try {
/*@egen*/		try {	  (Func()	  VariosFunc())?    }    catch (ParseException e)    {       consumeUntil(g, e, "variosFunc");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}int Main() throws ParseEOFException:{/*@bgen(jjtree) Main */
 SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.main;}{/*@bgen(jjtree) Main */
  try {
/*@egen*/  try {     	<MAIN> <ACHAVES>  		 VarDecl()		 SeqComandos()				 <FCHAVES>    }    catch (ParseException e)    {       consumeUntil(g, e, "main");    }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/    {    return 0;  	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseEOFException) {
      throw (ParseEOFException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void VarDecl() throws ParseEOFException:{/*@bgen(jjtree) VarDecl */
 SimpleNode jjtn000 = new SimpleNode(JJTVARDECL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.varDecl;}{/*@bgen(jjtree) VarDecl */
    try {
/*@egen*/    try {     	(<VAR> Tipo() <IDENTIFICADOR> Atribuicao())*    }    catch (ParseException e)    {       consumeUntil(g, e, "varDecl");    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof ParseEOFException) {
        throw (ParseEOFException)jjte000;
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ }void Tipo() throws ParseEOFException:{/*@bgen(jjtree) Tipo */
 SimpleNode jjtn000 = new SimpleNode(JJTTIPO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.tipo;}{/*@bgen(jjtree) Tipo */
        try {
/*@egen*/	try {     	<INT> | <BOOL> | <FLOAT>    }    catch (ParseException e)    {       consumeUntil(g, e, "tipo");    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Atribuicao() throws ParseEOFException:{/*@bgen(jjtree) Atribuicao */
 SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.atribuicao;}{/*@bgen(jjtree) Atribuicao */
        try {
/*@egen*/	try {     	 Atribuir()|<PTOVIRGULA>     }    catch (ParseException e)    {       consumeUntil(g, e, "atribuicao");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  }void Atribuir() throws ParseEOFException:{/*@bgen(jjtree) Atribuir */
 SimpleNode jjtn000 = new SimpleNode(JJTATRIBUIR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.atribuir;}{/*@bgen(jjtree) Atribuir */
        try {
/*@egen*/	try {     	<ATRIB> Exp() Loop()  |    	<APARENT> TalvezListaExp() <FPARENT> <PTOVIRGULA>|    	Mdeclaracao()     }    catch (ParseException e)    {       consumeUntil(g, e, "atribuir");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void TalvezListaExp()throws ParseEOFException:{/*@bgen(jjtree) TalvezListaExp */
 SimpleNode jjtn000 = new SimpleNode(JJTTALVEZLISTAEXP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.talvezListaExp;}{/*@bgen(jjtree) TalvezListaExp */
        try {
/*@egen*/	try {     	(ListaExp())?    }    catch (ParseException e)    {       consumeUntil(g, e, "talvezListaExp");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  }void Loop()throws ParseEOFException:{/*@bgen(jjtree) Loop */
 SimpleNode jjtn000 = new SimpleNode(JJTLOOP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.loop;}{/*@bgen(jjtree) Loop */
        try {
/*@egen*/  	try {     	Mdeclaracao() | <PTOVIRGULA>    }    catch (ParseException e)    {       consumeUntil(g, e, "loop");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/   }void ListaExp() throws ParseEOFException:{/*@bgen(jjtree) ListaExp */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTAEXP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.listaExp;}{/*@bgen(jjtree) ListaExp */
        try {
/*@egen*/  	try {     	Exp() ListaExp2()    }    catch (ParseException e)    {       consumeUntil(g, e, "listaExp");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ListaExp2() throws ParseEOFException:{/*@bgen(jjtree) ListaExp2 */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTAEXP2);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.listaExp2;}{/*@bgen(jjtree) ListaExp2 */
        try {
/*@egen*/	try {     	(<VIRGULA> Exp() ListaExp2())?    }    catch (ParseException e)    {       consumeUntil(g, e, "listaExp2");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  }void Mdeclaracao() throws ParseEOFException:{/*@bgen(jjtree) Mdeclaracao */
 SimpleNode jjtn000 = new SimpleNode(JJTMDECLARACAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.mdeclaracao;}{/*@bgen(jjtree) Mdeclaracao */
        try {
/*@egen*/	try {     	<VIRGULA> <IDENTIFICADOR> Atribuicao()    }    catch (ParseException e)    {       consumeUntil(g, e, "mdeclaracao");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  	}void Exp() throws ParseEOFException:{/*@bgen(jjtree) Exp */
 SimpleNode jjtn000 = new SimpleNode(JJTEXP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.exp;}{/*@bgen(jjtree) Exp */
        try {
/*@egen*/	try {     	<APARENT> Exp() <OP> Exp() <FPARENT> | Fator()    }    catch (ParseException e)    {       consumeUntil(g, e, "exp");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	}void Fator() throws ParseEOFException:{/*@bgen(jjtree) Fator */
 SimpleNode jjtn000 = new SimpleNode(JJTFATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.fator;}{/*@bgen(jjtree) Fator */
        try {
/*@egen*/	try {     	<IDENTIFICADOR> TalvezFator() | <TOKEN_NUMLIT> | <TRUE> | <FALSE>    }    catch (ParseException e)    {       consumeUntil(g, e, "fator");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  }void TalvezFator() throws ParseEOFException:{/*@bgen(jjtree) TalvezFator */
 SimpleNode jjtn000 = new SimpleNode(JJTTALVEZFATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.talvezFator;}{/*@bgen(jjtree) TalvezFator */
        try {
/*@egen*/	try {     	(<APARENT>TalvezListaExp() <FPARENT>)?    }    catch (ParseException e)    {       consumeUntil(g, e, "talvezFator");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 	}void SeqComandos() throws ParseEOFException:{/*@bgen(jjtree) SeqComandos */
 SimpleNode jjtn000 = new SimpleNode(JJTSEQCOMANDOS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.seqComandos;}{/*@bgen(jjtree) SeqComandos */
        try {
/*@egen*/	try {     	(Comando()SeqComandos())?    }    catch (ParseException e)    {       consumeUntil(g, e, "seqComandos");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  }void Comando()throws ParseEOFException:{/*@bgen(jjtree) Comando */
 SimpleNode jjtn000 = new SimpleNode(JJTCOMANDO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.comando;}{/*@bgen(jjtree) Comando */
        try {
/*@egen*/	try {     	<IDENTIFICADOR> Atribuir() 		| <IF> <APARENT> Exp_logicas() <FPARENT><ACHAVES>SeqComandos()<FCHAVES> TalvezElse() <PTOVIRGULA>		| <WHILE> <APARENT> Exp_logicas() <FPARENT><ACHAVES>SeqComandos()<FCHAVES> <PTOVIRGULA>		| <DO> <ACHAVES>SeqComandos()<FCHAVES> <WHILE> <APARENT> Exp_logicas() <FPARENT> <PTOVIRGULA>								| <RETURN> Exp() <PTOVIRGULA>		| <PRINT> <APARENT> Exp() <FPARENT> <PTOVIRGULA>    }    catch (ParseException e)    {       consumeUntil(g, e, "comando");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/   }void TalvezElse()throws ParseEOFException:{/*@bgen(jjtree) TalvezElse */
 SimpleNode jjtn000 = new SimpleNode(JJTTALVEZELSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.talvezElse;}{/*@bgen(jjtree) TalvezElse */
        try {
/*@egen*/	try {     	(<ELSE> <ACHAVES>SeqComandos()<FCHAVES>)?    }    catch (ParseException e)    {       consumeUntil(g, e, "talvezElse");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/   }void Exp_logicas() throws ParseEOFException:{/*@bgen(jjtree) Exp_logicas */
 SimpleNode jjtn000 = new SimpleNode(JJTEXP_LOGICAS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.exp_logicas;}{/*@bgen(jjtree) Exp_logicas */
        try {
/*@egen*/	try {     	<APARENT> Exp_logicas() <OPL> Exp_logicas() <FPARENT> | Fator_logico()    }    catch (ParseException e)    {       consumeUntil(g, e, "exp_logicas");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  	}void Fator_logico() throws ParseEOFException:{/*@bgen(jjtree) Fator_logico */
 SimpleNode jjtn000 = new SimpleNode(JJTFATOR_LOGICO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.fator_logico;}{/*@bgen(jjtree) Fator_logico */
        try {
/*@egen*/	try {     	<IDENTIFICADOR> | <TOKEN_NUMLIT> | <TRUE> | <FALSE>    }    catch (ParseException e)    {       consumeUntil(g, e, "fator_logico");    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Func() throws ParseEOFException:{/*@bgen(jjtree) Func */
 SimpleNode jjtn000 = new SimpleNode(JJTFUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.func;}{/*@bgen(jjtree) Func */
        try {
/*@egen*/	try {     	<FUNCAO> Tipo() <IDENTIFICADOR> <APARENT> TalvezListaArg() <FPARENT> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>    }    catch (ParseException e)    {       consumeUntil(g, e, "func");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void TalvezListaArg()throws ParseEOFException:{/*@bgen(jjtree) TalvezListaArg */
 SimpleNode jjtn000 = new SimpleNode(JJTTALVEZLISTAARG);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.talvezListaArg;}{/*@bgen(jjtree) TalvezListaArg */
        try {
/*@egen*/	try { ( ListaArg() )?    }    catch (ParseException e)    {       consumeUntil(g, e, "talvezListaArg");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	}void ListaArg()throws ParseEOFException:{/*@bgen(jjtree) ListaArg */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTAARG);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.listaArg;}{/*@bgen(jjtree) ListaArg */
        try {
/*@egen*/	try {     	Tipo() <IDENTIFICADOR> ListaArg2()    }    catch (ParseException e)    {       consumeUntil(g, e, "listaArg");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  }void ListaArg2()throws ParseEOFException:{/*@bgen(jjtree) ListaArg2 */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTAARG2);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.listaArg2;}{/*@bgen(jjtree) ListaArg2 */
        try {
/*@egen*/	try { (<VIRGULA> Tipo() <IDENTIFICADOR> ListaArg2())?    }    catch (ParseException e)    {       consumeUntil(g, e, "listaArg2");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 		}