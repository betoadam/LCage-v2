/* Generated By:JJTree&JavaCC: Do not edit this line. LCage.java */
package parser;
import recovery.*;
import view.Tela;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.io.FileWriter;
import controleDeArquivos.CreateFile;
import java.io.FileWriter;
import javax.swing.JFileChooser;

public class LCage/*@bgen(jjtree)*/implements LCageTreeConstants, LCageConstants {/*@bgen(jjtree)*/
  protected static JJTLCageState jjtree = new JJTLCageState();final static Tela window = new Tela();

  public static void main(String args []) throws ParseException
  {
        //Inicia a tela                window.setVisible(true);

                window.getCompilar().addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {

                                window.setVazioConsoleMsg();

                                if((window.getTextArquivo().getText().equals(window.getCampoTexto())) != true)
                {
                  window.setControleArquivo(false);
                }


                if(window.getControleArquivo() || window.getTextArquivo().getText().equals(" ") )
                {
                                        inicia();
                                }else
                                {
                                        if(window.getTextArquivo().getText().equals(""))
                        {
                            JOptionPane.showMessageDialog (null, "Arquivo vazio", "Arquivo", JOptionPane.WARNING_MESSAGE);
                        }else{
                          int resp = JOptionPane.showConfirmDialog(null, "Salvar altera\u00e7\u00f5es?");

                          if(resp == 0)
                          {
                            //Salvar um novo arquivo se ele n existir                            if(window.getFile() == null)
                            {
                                window.salvarComo();
                                                        inicia();

                            }else //Se o arquivo ja existir salvar nele                            {
                                window.salvar();
                                                        inicia();
                            }
                          }
                        }
                                }
                        }
                });
  }

//FunÁ„o que inicia a compilaÁ„o  static void inicia(){
    FileReader arql = null;

    try {
                        arql = new FileReader(window.getFile());
                } catch (FileNotFoundException e2) {
                        e2.printStackTrace();
                }
                BufferedReader arq = new BufferedReader(arql);
            try
            {
              LCage parser = new LCage(arq);
            }catch (Exception e1)
            {
              LCage.ReInit(arq);
            }catch (Error e1)
                {
                  LCage.ReInit(arq);
                }

        try
        {
                SimpleNode n = LCage.Start();
                        n.dump("", window);
                }
                catch (Exception e1)
        {}
                catch (Error e1)
                {}
  }

  static public String im(int x)
  {
    int k;
    String s;
    s = tokenImage [x];
    k = s.lastIndexOf("\u005c"");
    try
    {
      s = s.substring(1, k);
    }
    catch (StringIndexOutOfBoundsException e)
    {}
    return s;
  }

  static Token lastError = null;

  static boolean eof; // vari√°vel que indica se EOF foi alcan√ßado

  // o m√©todo abaixo consome tokens at√© alcan√ßar um que perten√ßa ao conjunto
  // de sincroniza√ß√£o
  static void consumeUntil(RecoverySet g, ParseException e, String met) throws ParseEOFException, ParseException
  {
    Token tok;
    window.setConsole("\u005cn*** " + met + " ***");
    window.setConsole("\u005cn     Conjunto de sincroniza\u00e7\u00e3o: " + g);
    if (g == null) throw e; // se o conjunto √© null, propaga a exce√ß√£o
    tok = getToken(1); // pega token corrente
    while (!eof)
    { // se n√£o chegou ao fim do arquivo
      if (g.contains(tok.kind))
      { //achou um token no conjunto
        window.setConsole("\u005cn     Encontrado token de sincroniza\u00e7\u00e3o: " + im(tok.kind));
        break;
      }
      window.setConsole("\u005cn     Ignorando o token: " + im(tok.kind));
      getNextToken(); // pega pr√≥ximo token       
      tok = getToken(1);
      if (tok.kind == EOF && !g.contains(EOF))  // fim da entrada?   
      eof = true;
    }
    if (tok != lastError)
    {
      window.setConsole(e.getMessage());
      lastError = tok;
    }
    if (eof) throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }

  static final public SimpleNode Start() throws ParseException, ParseEOFException {
    trace_call("Start");
    try {
 /*@bgen(jjtree) Start */
 SimpleNode jjtn000 = new SimpleNode(JJTSTART);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.start;
      try {
        try {
          Main();
          VariosFunc();
        } catch (ParseException e) {
       consumeUntil(g, e, "start");
        }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseEOFException) {
      {if (true) throw (ParseEOFException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Start");
    }
  }

  static final public void VariosFunc() throws ParseException, ParseEOFException {
    trace_call("VariosFunc");
    try {
 /*@bgen(jjtree) VariosFunc */
 SimpleNode jjtn000 = new SimpleNode(JJTVARIOSFUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.variosFunc;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FUNCAO:
            Func();
            VariosFunc();
            break;
          default:
            jj_la1[0] = jj_gen;
            ;
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "variosFunc");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("VariosFunc");
    }
  }

  static final public int Main() throws ParseException, ParseEOFException {
    trace_call("Main");
    try {
 /*@bgen(jjtree) Main */
 SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.main;
      try {
        try {
          jj_consume_token(MAIN);
          jj_consume_token(ACHAVES);
          VarDecl();
          SeqComandos();
          jj_consume_token(FCHAVES);
        } catch (ParseException e) {
       consumeUntil(g, e, "main");
        }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    {if (true) return 0;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseEOFException) {
      {if (true) throw (ParseEOFException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Main");
    }
  }

  static final public void VarDecl() throws ParseException, ParseEOFException {
    trace_call("VarDecl");
    try {
 /*@bgen(jjtree) VarDecl */
 SimpleNode jjtn000 = new SimpleNode(JJTVARDECL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.varDecl;
      try {
        try {
          label_1:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VAR:
              ;
              break;
            default:
              jj_la1[1] = jj_gen;
              break label_1;
            }
            jj_consume_token(VAR);
            Tipo();
            jj_consume_token(IDENTIFICADOR);
            Atribuicao();
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "varDecl");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof ParseEOFException) {
        {if (true) throw (ParseEOFException)jjte000;}
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("VarDecl");
    }
  }

  static final public void Tipo() throws ParseException, ParseEOFException {
    trace_call("Tipo");
    try {
 /*@bgen(jjtree) Tipo */
 SimpleNode jjtn000 = new SimpleNode(JJTTIPO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.tipo;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
            jj_consume_token(INT);
            break;
          case BOOL:
            jj_consume_token(BOOL);
            break;
          case FLOAT:
            jj_consume_token(FLOAT);
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "tipo");
        }
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Tipo");
    }
  }

  static final public void Atribuicao() throws ParseException, ParseEOFException {
    trace_call("Atribuicao");
    try {
 /*@bgen(jjtree) Atribuicao */
 SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.atribuicao;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case APARENT:
          case VIRGULA:
          case ATRIB:
            Atribuir();
            break;
          case PTOVIRGULA:
            jj_consume_token(PTOVIRGULA);
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "atribuicao");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Atribuicao");
    }
  }

  static final public void Atribuir() throws ParseException, ParseEOFException {
    trace_call("Atribuir");
    try {
 /*@bgen(jjtree) Atribuir */
 SimpleNode jjtn000 = new SimpleNode(JJTATRIBUIR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.atribuir;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATRIB:
            jj_consume_token(ATRIB);
            Exp();
            Loop();
            break;
          case APARENT:
            jj_consume_token(APARENT);
            TalvezListaExp();
            jj_consume_token(FPARENT);
            jj_consume_token(PTOVIRGULA);
            break;
          case VIRGULA:
            Mdeclaracao();
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "atribuir");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Atribuir");
    }
  }

  static final public void TalvezListaExp() throws ParseException, ParseEOFException {
    trace_call("TalvezListaExp");
    try {
 /*@bgen(jjtree) TalvezListaExp */
 SimpleNode jjtn000 = new SimpleNode(JJTTALVEZLISTAEXP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.talvezListaExp;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case APARENT:
          case TRUE:
          case FALSE:
          case IDENTIFICADOR:
          case TOKEN_NUMLIT:
            ListaExp();
            break;
          default:
            jj_la1[5] = jj_gen;
            ;
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "talvezListaExp");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("TalvezListaExp");
    }
  }

  static final public void Loop() throws ParseException, ParseEOFException {
    trace_call("Loop");
    try {
 /*@bgen(jjtree) Loop */
 SimpleNode jjtn000 = new SimpleNode(JJTLOOP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.loop;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRGULA:
            Mdeclaracao();
            break;
          case PTOVIRGULA:
            jj_consume_token(PTOVIRGULA);
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "loop");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Loop");
    }
  }

  static final public void ListaExp() throws ParseException, ParseEOFException {
    trace_call("ListaExp");
    try {
 /*@bgen(jjtree) ListaExp */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTAEXP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.listaExp;
      try {
        try {
          Exp();
          ListaExp2();
        } catch (ParseException e) {
       consumeUntil(g, e, "listaExp");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("ListaExp");
    }
  }

  static final public void ListaExp2() throws ParseException, ParseEOFException {
    trace_call("ListaExp2");
    try {
 /*@bgen(jjtree) ListaExp2 */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTAEXP2);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.listaExp2;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRGULA:
            jj_consume_token(VIRGULA);
            Exp();
            ListaExp2();
            break;
          default:
            jj_la1[7] = jj_gen;
            ;
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "listaExp2");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("ListaExp2");
    }
  }

  static final public void Mdeclaracao() throws ParseException, ParseEOFException {
    trace_call("Mdeclaracao");
    try {
 /*@bgen(jjtree) Mdeclaracao */
 SimpleNode jjtn000 = new SimpleNode(JJTMDECLARACAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.mdeclaracao;
      try {
        try {
          jj_consume_token(VIRGULA);
          jj_consume_token(IDENTIFICADOR);
          Atribuicao();
        } catch (ParseException e) {
       consumeUntil(g, e, "mdeclaracao");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Mdeclaracao");
    }
  }

  static final public void Exp() throws ParseException, ParseEOFException {
    trace_call("Exp");
    try {
 /*@bgen(jjtree) Exp */
 SimpleNode jjtn000 = new SimpleNode(JJTEXP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.exp;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case APARENT:
            jj_consume_token(APARENT);
            Exp();
            jj_consume_token(OP);
            Exp();
            jj_consume_token(FPARENT);
            break;
          case TRUE:
          case FALSE:
          case IDENTIFICADOR:
          case TOKEN_NUMLIT:
            Fator();
            break;
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "exp");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Exp");
    }
  }

  static final public void Fator() throws ParseException, ParseEOFException {
    trace_call("Fator");
    try {
 /*@bgen(jjtree) Fator */
 SimpleNode jjtn000 = new SimpleNode(JJTFATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.fator;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFICADOR:
            jj_consume_token(IDENTIFICADOR);
            TalvezFator();
            break;
          case TOKEN_NUMLIT:
            jj_consume_token(TOKEN_NUMLIT);
            break;
          case TRUE:
            jj_consume_token(TRUE);
            break;
          case FALSE:
            jj_consume_token(FALSE);
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "fator");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Fator");
    }
  }

  static final public void TalvezFator() throws ParseException, ParseEOFException {
    trace_call("TalvezFator");
    try {
 /*@bgen(jjtree) TalvezFator */
 SimpleNode jjtn000 = new SimpleNode(JJTTALVEZFATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.talvezFator;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case APARENT:
            jj_consume_token(APARENT);
            TalvezListaExp();
            jj_consume_token(FPARENT);
            break;
          default:
            jj_la1[10] = jj_gen;
            ;
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "talvezFator");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("TalvezFator");
    }
  }

  static final public void SeqComandos() throws ParseException, ParseEOFException {
    trace_call("SeqComandos");
    try {
 /*@bgen(jjtree) SeqComandos */
 SimpleNode jjtn000 = new SimpleNode(JJTSEQCOMANDOS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.seqComandos;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case WHILE:
          case DO:
          case RETURN:
          case PRINT:
          case IDENTIFICADOR:
            Comando();
            SeqComandos();
            break;
          default:
            jj_la1[11] = jj_gen;
            ;
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "seqComandos");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("SeqComandos");
    }
  }

  static final public void Comando() throws ParseException, ParseEOFException {
    trace_call("Comando");
    try {
 /*@bgen(jjtree) Comando */
 SimpleNode jjtn000 = new SimpleNode(JJTCOMANDO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.comando;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFICADOR:
            jj_consume_token(IDENTIFICADOR);
            Atribuir();
            break;
          case IF:
            jj_consume_token(IF);
            jj_consume_token(APARENT);
            Exp_logicas();
            jj_consume_token(FPARENT);
            jj_consume_token(ACHAVES);
            SeqComandos();
            jj_consume_token(FCHAVES);
            TalvezElse();
            jj_consume_token(PTOVIRGULA);
            break;
          case WHILE:
            jj_consume_token(WHILE);
            jj_consume_token(APARENT);
            Exp_logicas();
            jj_consume_token(FPARENT);
            jj_consume_token(ACHAVES);
            SeqComandos();
            jj_consume_token(FCHAVES);
            jj_consume_token(PTOVIRGULA);
            break;
          case DO:
            jj_consume_token(DO);
            jj_consume_token(ACHAVES);
            SeqComandos();
            jj_consume_token(FCHAVES);
            jj_consume_token(WHILE);
            jj_consume_token(APARENT);
            Exp_logicas();
            jj_consume_token(FPARENT);
            jj_consume_token(PTOVIRGULA);
            break;
          case RETURN:
            jj_consume_token(RETURN);
            Exp();
            jj_consume_token(PTOVIRGULA);
            break;
          case PRINT:
            jj_consume_token(PRINT);
            jj_consume_token(APARENT);
            Exp();
            jj_consume_token(FPARENT);
            jj_consume_token(PTOVIRGULA);
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "comando");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Comando");
    }
  }

  static final public void TalvezElse() throws ParseException, ParseEOFException {
    trace_call("TalvezElse");
    try {
 /*@bgen(jjtree) TalvezElse */
 SimpleNode jjtn000 = new SimpleNode(JJTTALVEZELSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.talvezElse;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSE:
            jj_consume_token(ELSE);
            jj_consume_token(ACHAVES);
            SeqComandos();
            jj_consume_token(FCHAVES);
            break;
          default:
            jj_la1[13] = jj_gen;
            ;
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "talvezElse");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("TalvezElse");
    }
  }

  static final public void Exp_logicas() throws ParseException, ParseEOFException {
    trace_call("Exp_logicas");
    try {
 /*@bgen(jjtree) Exp_logicas */
 SimpleNode jjtn000 = new SimpleNode(JJTEXP_LOGICAS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.exp_logicas;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case APARENT:
            jj_consume_token(APARENT);
            Exp_logicas();
            jj_consume_token(OPL);
            Exp_logicas();
            jj_consume_token(FPARENT);
            break;
          case TRUE:
          case FALSE:
          case IDENTIFICADOR:
          case TOKEN_NUMLIT:
            Fator_logico();
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "exp_logicas");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Exp_logicas");
    }
  }

  static final public void Fator_logico() throws ParseException, ParseEOFException {
    trace_call("Fator_logico");
    try {
 /*@bgen(jjtree) Fator_logico */
 SimpleNode jjtn000 = new SimpleNode(JJTFATOR_LOGICO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.fator_logico;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFICADOR:
            jj_consume_token(IDENTIFICADOR);
            break;
          case TOKEN_NUMLIT:
            jj_consume_token(TOKEN_NUMLIT);
            break;
          case TRUE:
            jj_consume_token(TRUE);
            break;
          case FALSE:
            jj_consume_token(FALSE);
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "fator_logico");
        }
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Fator_logico");
    }
  }

  static final public void Func() throws ParseException, ParseEOFException {
    trace_call("Func");
    try {
 /*@bgen(jjtree) Func */
 SimpleNode jjtn000 = new SimpleNode(JJTFUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.func;
      try {
        try {
          jj_consume_token(FUNCAO);
          Tipo();
          jj_consume_token(IDENTIFICADOR);
          jj_consume_token(APARENT);
          TalvezListaArg();
          jj_consume_token(FPARENT);
          jj_consume_token(ACHAVES);
          VarDecl();
          SeqComandos();
          jj_consume_token(FCHAVES);
        } catch (ParseException e) {
       consumeUntil(g, e, "func");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Func");
    }
  }

  static final public void TalvezListaArg() throws ParseException, ParseEOFException {
    trace_call("TalvezListaArg");
    try {
 /*@bgen(jjtree) TalvezListaArg */
 SimpleNode jjtn000 = new SimpleNode(JJTTALVEZLISTAARG);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.talvezListaArg;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case FLOAT:
          case BOOL:
            ListaArg();
            break;
          default:
            jj_la1[16] = jj_gen;
            ;
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "talvezListaArg");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("TalvezListaArg");
    }
  }

  static final public void ListaArg() throws ParseException, ParseEOFException {
    trace_call("ListaArg");
    try {
 /*@bgen(jjtree) ListaArg */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTAARG);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.listaArg;
      try {
        try {
          Tipo();
          jj_consume_token(IDENTIFICADOR);
          ListaArg2();
        } catch (ParseException e) {
       consumeUntil(g, e, "listaArg");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("ListaArg");
    }
  }

  static final public void ListaArg2() throws ParseException, ParseEOFException {
    trace_call("ListaArg2");
    try {
 /*@bgen(jjtree) ListaArg2 */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTAARG2);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = First.listaArg2;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRGULA:
            jj_consume_token(VIRGULA);
            Tipo();
            jj_consume_token(IDENTIFICADOR);
            ListaArg2();
            break;
          default:
            jj_la1[17] = jj_gen;
            ;
          }
        } catch (ParseException e) {
       consumeUntil(g, e, "listaArg2");
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            {if (true) throw (ParseEOFException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("ListaArg2");
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LCageTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200000,0x2000,0x1c00000,0x18004800,0x18000800,0x6000800,0x8004000,0x8000000,0x6000800,0x6000000,0x800,0x1e8000,0x1e8000,0x10000,0x6000800,0x6000000,0x1c00000,0x8000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0xc0,0xc0,0x0,0x40,0x40,0x0,0xc0,0xc0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public LCage(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LCage(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LCageTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LCage(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LCageTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LCage(LCageTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LCageTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
